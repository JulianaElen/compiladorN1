
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL BREAK CHAR DIVIDE DO DOT ELSE EQ EQUALS FALSE GE GT HASH ID IF INT LBRACE LBRACK LE LPAREN LT MINUS NEG NEQ NOT NUMBER_FLOAT NUMBER_INT OR PLUS PRINT RBRACE RBRACK READ RECORD RPAREN SEMICOLON TIMES TRUE WHILEprogram : blockblock : LBRACE declaration statements RBRACEdeclaration : type ID SEMICOLON declaration\n                   | empty type : basic dimensions\n             | basic HASH\n             | basic\n             | RECORD LBRACE declaration RBRACEdimensions : LBRACK NUMBER_INT RBRACK dimensions\n                  | LBRACK NUMBER_INT RBRACKbasic : INT\n             | CHAR\n             | BOOLstatements : statement statements\n                  | emptystatement : local EQUALS boolean SEMICOLON\n                 | conditional\n                 | while_loop\n                 | do_while_loop\n                 | BREAK SEMICOLON\n                 | print\n                 | read\n                 | blockprint : PRINT LPAREN boolean RPAREN SEMICOLONread : READ LPAREN local RPAREN SEMICOLONconditional : IF LPAREN boolean RPAREN statement conditional_auxconditional_aux : ELSE statement\n                       | emptywhile_loop : WHILE LPAREN boolean RPAREN statementdo_while_loop : DO statement WHILE LPAREN boolean RPAREN SEMICOLONlocal : HASH ID local_aux\n             | ID local_auxlocal_aux : offset\n                   | field\n                   | emptyoffset : LBRACK boolean RBRACK offset\n              | emptyfield : DOT factor field\n             | DOT factorboolean : join\n               | boolean OR joinjoin : equality\n            | join AND equality equality : relational \n                | equality EQ relational\n                | equality NEQ relationalrelational : expression \n                  | relational_operator expressionrelational_operator : LT\n                           | LE\n                           | GT\n                           | GEexpression : term expression_auxexpression_aux : expression_operator term expression_aux\n                      | emptyexpression_operator : PLUS\n                           | MINUSterm : unary\n            | term TIMES unary\n            | term DIVIDE unaryunary : NOT unary\n             | NEG unary\n             | factorfactor : LPAREN boolean RPAREN\n              | local\n              | NUMBER_INT\n              | NUMBER_FLOAT\n              | FALSE\n              | TRUEempty :'
    
_lr_action_items = {'LBRACE':([0,3,4,6,8,13,16,17,18,20,21,22,27,35,38,51,83,86,104,105,120,121,123,124,126,127,128,130,131,],[3,-70,3,-4,34,3,-17,-18,-19,-21,-22,-23,3,-2,-20,-70,-3,-16,3,3,-70,-29,-24,-25,-26,3,-28,-27,-30,]),'$end':([1,2,35,],[0,-1,-2,]),'RECORD':([3,34,51,],[8,8,8,]),'BREAK':([3,4,6,13,16,17,18,20,21,22,27,35,38,51,83,86,104,105,120,121,123,124,126,127,128,130,131,],[-70,19,-4,19,-17,-18,-19,-21,-22,-23,19,-2,-20,-70,-3,-16,19,19,-70,-29,-24,-25,-26,19,-28,-27,-30,]),'HASH':([3,4,6,7,9,10,11,13,16,17,18,20,21,22,27,35,37,38,44,45,46,47,49,50,51,60,62,63,64,65,67,68,70,83,86,87,88,89,90,93,94,95,97,98,104,105,106,120,121,123,124,126,127,128,130,131,],[-70,23,-4,32,-11,-12,-13,23,-17,-18,-19,-21,-22,-23,23,-2,23,-20,23,23,23,23,23,23,-70,23,-49,-50,-51,-52,23,23,23,-3,-16,23,23,23,23,23,23,23,-56,-57,23,23,23,-70,-29,-24,-25,-26,23,-28,-27,-30,]),'ID':([3,4,5,6,7,9,10,11,13,16,17,18,20,21,22,23,27,31,32,35,37,38,44,45,46,47,49,50,51,60,62,63,64,65,67,68,70,83,84,85,86,87,88,89,90,93,94,95,97,98,104,105,106,109,120,121,123,124,126,127,128,130,131,],[-70,24,30,-4,-7,-11,-12,-13,24,-17,-18,-19,-21,-22,-23,39,24,-5,-6,-2,24,-20,24,24,24,24,24,24,-70,24,-49,-50,-51,-52,24,24,24,-3,-10,-8,-16,24,24,24,24,24,24,24,-56,-57,24,24,24,-9,-70,-29,-24,-25,-26,24,-28,-27,-30,]),'IF':([3,4,6,13,16,17,18,20,21,22,27,35,38,51,83,86,104,105,120,121,123,124,126,127,128,130,131,],[-70,25,-4,25,-17,-18,-19,-21,-22,-23,25,-2,-20,-70,-3,-16,25,25,-70,-29,-24,-25,-26,25,-28,-27,-30,]),'WHILE':([3,4,6,13,16,17,18,20,21,22,27,35,38,48,51,83,86,104,105,120,121,123,124,126,127,128,130,131,],[-70,26,-4,26,-17,-18,-19,-21,-22,-23,26,-2,-20,80,-70,-3,-16,26,26,-70,-29,-24,-25,-26,26,-28,-27,-30,]),'DO':([3,4,6,13,16,17,18,20,21,22,27,35,38,51,83,86,104,105,120,121,123,124,126,127,128,130,131,],[-70,27,-4,27,-17,-18,-19,-21,-22,-23,27,-2,-20,-70,-3,-16,27,27,-70,-29,-24,-25,-26,27,-28,-27,-30,]),'PRINT':([3,4,6,13,16,17,18,20,21,22,27,35,38,51,83,86,104,105,120,121,123,124,126,127,128,130,131,],[-70,28,-4,28,-17,-18,-19,-21,-22,-23,28,-2,-20,-70,-3,-16,28,28,-70,-29,-24,-25,-26,28,-28,-27,-30,]),'READ':([3,4,6,13,16,17,18,20,21,22,27,35,38,51,83,86,104,105,120,121,123,124,126,127,128,130,131,],[-70,29,-4,29,-17,-18,-19,-21,-22,-23,29,-2,-20,-70,-3,-16,29,29,-70,-29,-24,-25,-26,29,-28,-27,-30,]),'RBRACE':([3,4,6,12,13,14,16,17,18,20,21,22,34,35,36,38,51,53,83,86,120,121,123,124,126,128,130,131,],[-70,-70,-4,35,-70,-15,-17,-18,-19,-21,-22,-23,-70,-2,-14,-20,-70,85,-3,-16,-70,-29,-24,-25,-26,-28,-27,-30,]),'INT':([3,34,51,],[9,9,9,]),'CHAR':([3,34,51,],[10,10,10,]),'BOOL':([3,34,51,],[11,11,11,]),'LBRACK':([7,9,10,11,24,39,84,102,],[33,-11,-12,-13,44,44,33,44,]),'EQUALS':([15,24,39,40,41,42,43,54,71,72,73,74,75,77,102,103,117,118,119,],[37,-70,-70,-32,-33,-34,-35,-65,-66,-67,-68,-69,-31,-39,-70,-38,-64,-36,-37,]),'ELSE':([16,17,18,20,21,22,35,38,86,120,121,123,124,126,128,130,131,],[-17,-18,-19,-21,-22,-23,-2,-20,-16,127,-29,-24,-25,-26,-28,-27,-30,]),'SEMICOLON':([19,24,30,39,40,41,42,43,54,55,56,57,58,59,61,66,69,71,72,73,74,75,77,91,92,96,99,100,102,103,107,108,110,111,112,113,114,115,116,117,118,119,125,129,],[38,-70,51,-70,-32,-33,-34,-35,-65,86,-40,-42,-44,-47,-70,-58,-63,-66,-67,-68,-69,-31,-39,-48,-53,-55,-61,-62,-70,-38,123,124,-41,-43,-45,-46,-59,-60,-70,-64,-36,-37,-54,131,]),'DOT':([24,39,40,41,42,43,54,71,72,73,74,75,77,102,103,117,118,119,],[45,45,-32,-33,-34,-35,-65,-66,-67,-68,-69,-31,45,-70,-38,-64,-36,-37,]),'TIMES':([24,39,40,41,42,43,54,61,66,69,71,72,73,74,75,77,99,100,102,103,114,115,116,117,118,119,],[-70,-70,-32,-33,-34,-35,-65,93,-58,-63,-66,-67,-68,-69,-31,-39,-61,-62,-70,-38,-59,-60,93,-64,-36,-37,]),'DIVIDE':([24,39,40,41,42,43,54,61,66,69,71,72,73,74,75,77,99,100,102,103,114,115,116,117,118,119,],[-70,-70,-32,-33,-34,-35,-65,94,-58,-63,-66,-67,-68,-69,-31,-39,-61,-62,-70,-38,-59,-60,94,-64,-36,-37,]),'PLUS':([24,39,40,41,42,43,54,61,66,69,71,72,73,74,75,77,99,100,102,103,114,115,116,117,118,119,],[-70,-70,-32,-33,-34,-35,-65,97,-58,-63,-66,-67,-68,-69,-31,-39,-61,-62,-70,-38,-59,-60,97,-64,-36,-37,]),'MINUS':([24,39,40,41,42,43,54,61,66,69,71,72,73,74,75,77,99,100,102,103,114,115,116,117,118,119,],[-70,-70,-32,-33,-34,-35,-65,98,-58,-63,-66,-67,-68,-69,-31,-39,-61,-62,-70,-38,-59,-60,98,-64,-36,-37,]),'EQ':([24,39,40,41,42,43,54,57,58,59,61,66,69,71,72,73,74,75,77,91,92,96,99,100,102,103,111,112,113,114,115,116,117,118,119,125,],[-70,-70,-32,-33,-34,-35,-65,89,-44,-47,-70,-58,-63,-66,-67,-68,-69,-31,-39,-48,-53,-55,-61,-62,-70,-38,89,-45,-46,-59,-60,-70,-64,-36,-37,-54,]),'NEQ':([24,39,40,41,42,43,54,57,58,59,61,66,69,71,72,73,74,75,77,91,92,96,99,100,102,103,111,112,113,114,115,116,117,118,119,125,],[-70,-70,-32,-33,-34,-35,-65,90,-44,-47,-70,-58,-63,-66,-67,-68,-69,-31,-39,-48,-53,-55,-61,-62,-70,-38,90,-45,-46,-59,-60,-70,-64,-36,-37,-54,]),'AND':([24,39,40,41,42,43,54,56,57,58,59,61,66,69,71,72,73,74,75,77,91,92,96,99,100,102,103,110,111,112,113,114,115,116,117,118,119,125,],[-70,-70,-32,-33,-34,-35,-65,88,-42,-44,-47,-70,-58,-63,-66,-67,-68,-69,-31,-39,-48,-53,-55,-61,-62,-70,-38,88,-43,-45,-46,-59,-60,-70,-64,-36,-37,-54,]),'OR':([24,39,40,41,42,43,54,55,56,57,58,59,61,66,69,71,72,73,74,75,76,77,78,79,81,91,92,96,99,100,101,102,103,110,111,112,113,114,115,116,117,118,119,122,125,],[-70,-70,-32,-33,-34,-35,-65,87,-40,-42,-44,-47,-70,-58,-63,-66,-67,-68,-69,-31,87,-39,87,87,87,-48,-53,-55,-61,-62,87,-70,-38,-41,-43,-45,-46,-59,-60,-70,-64,-36,-37,87,-54,]),'RBRACK':([24,39,40,41,42,43,52,54,56,57,58,59,61,66,69,71,72,73,74,75,76,77,91,92,96,99,100,102,103,110,111,112,113,114,115,116,117,118,119,125,],[-70,-70,-32,-33,-34,-35,84,-65,-40,-42,-44,-47,-70,-58,-63,-66,-67,-68,-69,-31,102,-39,-48,-53,-55,-61,-62,-70,-38,-41,-43,-45,-46,-59,-60,-70,-64,-36,-37,-54,]),'RPAREN':([24,39,40,41,42,43,54,56,57,58,59,61,66,69,71,72,73,74,75,77,78,79,81,82,91,92,96,99,100,101,102,103,110,111,112,113,114,115,116,117,118,119,122,125,],[-70,-70,-32,-33,-34,-35,-65,-40,-42,-44,-47,-70,-58,-63,-66,-67,-68,-69,-31,-39,104,105,107,108,-48,-53,-55,-61,-62,117,-70,-38,-41,-43,-45,-46,-59,-60,-70,-64,-36,-37,129,-54,]),'LPAREN':([25,26,28,29,37,44,45,46,47,49,60,62,63,64,65,67,68,70,80,87,88,89,90,93,94,95,97,98,106,],[46,47,49,50,70,70,70,70,70,70,70,-49,-50,-51,-52,70,70,70,106,70,70,70,70,70,70,70,-56,-57,70,]),'NUMBER_INT':([33,37,44,45,46,47,49,60,62,63,64,65,67,68,70,87,88,89,90,93,94,95,97,98,106,],[52,71,71,71,71,71,71,71,-49,-50,-51,-52,71,71,71,71,71,71,71,71,71,71,-56,-57,71,]),'LT':([37,44,46,47,49,70,87,88,89,90,106,],[62,62,62,62,62,62,62,62,62,62,62,]),'LE':([37,44,46,47,49,70,87,88,89,90,106,],[63,63,63,63,63,63,63,63,63,63,63,]),'GT':([37,44,46,47,49,70,87,88,89,90,106,],[64,64,64,64,64,64,64,64,64,64,64,]),'GE':([37,44,46,47,49,70,87,88,89,90,106,],[65,65,65,65,65,65,65,65,65,65,65,]),'NOT':([37,44,46,47,49,60,62,63,64,65,67,68,70,87,88,89,90,93,94,95,97,98,106,],[67,67,67,67,67,67,-49,-50,-51,-52,67,67,67,67,67,67,67,67,67,67,-56,-57,67,]),'NEG':([37,44,46,47,49,60,62,63,64,65,67,68,70,87,88,89,90,93,94,95,97,98,106,],[68,68,68,68,68,68,-49,-50,-51,-52,68,68,68,68,68,68,68,68,68,68,-56,-57,68,]),'NUMBER_FLOAT':([37,44,45,46,47,49,60,62,63,64,65,67,68,70,87,88,89,90,93,94,95,97,98,106,],[72,72,72,72,72,72,72,-49,-50,-51,-52,72,72,72,72,72,72,72,72,72,72,-56,-57,72,]),'FALSE':([37,44,45,46,47,49,60,62,63,64,65,67,68,70,87,88,89,90,93,94,95,97,98,106,],[73,73,73,73,73,73,73,-49,-50,-51,-52,73,73,73,73,73,73,73,73,73,73,-56,-57,73,]),'TRUE':([37,44,45,46,47,49,60,62,63,64,65,67,68,70,87,88,89,90,93,94,95,97,98,106,],[74,74,74,74,74,74,74,-49,-50,-51,-52,74,74,74,74,74,74,74,74,74,74,-56,-57,74,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,4,13,27,104,105,127,],[2,22,22,22,22,22,22,]),'declaration':([3,34,51,],[4,53,83,]),'type':([3,34,51,],[5,5,5,]),'empty':([3,4,13,24,34,39,51,61,102,116,120,],[6,14,14,43,6,43,6,96,119,96,128,]),'basic':([3,34,51,],[7,7,7,]),'statements':([4,13,],[12,36,]),'statement':([4,13,27,104,105,127,],[13,13,48,120,121,130,]),'local':([4,13,27,37,44,45,46,47,49,50,60,67,68,70,87,88,89,90,93,94,95,104,105,106,127,],[15,15,15,54,54,54,54,54,54,82,54,54,54,54,54,54,54,54,54,54,54,15,15,54,15,]),'conditional':([4,13,27,104,105,127,],[16,16,16,16,16,16,]),'while_loop':([4,13,27,104,105,127,],[17,17,17,17,17,17,]),'do_while_loop':([4,13,27,104,105,127,],[18,18,18,18,18,18,]),'print':([4,13,27,104,105,127,],[20,20,20,20,20,20,]),'read':([4,13,27,104,105,127,],[21,21,21,21,21,21,]),'dimensions':([7,84,],[31,109,]),'local_aux':([24,39,],[40,75,]),'offset':([24,39,102,],[41,41,118,]),'field':([24,39,77,],[42,42,103,]),'boolean':([37,44,46,47,49,70,106,],[55,76,78,79,81,101,122,]),'join':([37,44,46,47,49,70,87,106,],[56,56,56,56,56,56,110,56,]),'equality':([37,44,46,47,49,70,87,88,106,],[57,57,57,57,57,57,57,111,57,]),'relational':([37,44,46,47,49,70,87,88,89,90,106,],[58,58,58,58,58,58,58,58,112,113,58,]),'expression':([37,44,46,47,49,60,70,87,88,89,90,106,],[59,59,59,59,59,91,59,59,59,59,59,59,]),'relational_operator':([37,44,46,47,49,70,87,88,89,90,106,],[60,60,60,60,60,60,60,60,60,60,60,]),'term':([37,44,46,47,49,60,70,87,88,89,90,95,106,],[61,61,61,61,61,61,61,61,61,61,61,116,61,]),'unary':([37,44,46,47,49,60,67,68,70,87,88,89,90,93,94,95,106,],[66,66,66,66,66,66,99,100,66,66,66,66,66,114,115,66,66,]),'factor':([37,44,45,46,47,49,60,67,68,70,87,88,89,90,93,94,95,106,],[69,69,77,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'expression_aux':([61,116,],[92,125,]),'expression_operator':([61,116,],[95,95,]),'conditional_aux':([120,],[126,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','principal.py',131),
  ('block -> LBRACE declaration statements RBRACE','block',4,'p_block','principal.py',135),
  ('declaration -> type ID SEMICOLON declaration','declaration',4,'p_declaration','principal.py',140),
  ('declaration -> empty','declaration',1,'p_declaration','principal.py',141),
  ('type -> basic dimensions','type',2,'p_type','principal.py',148),
  ('type -> basic HASH','type',2,'p_type','principal.py',149),
  ('type -> basic','type',1,'p_type','principal.py',150),
  ('type -> RECORD LBRACE declaration RBRACE','type',4,'p_type','principal.py',151),
  ('dimensions -> LBRACK NUMBER_INT RBRACK dimensions','dimensions',4,'p_dimensions','principal.py',160),
  ('dimensions -> LBRACK NUMBER_INT RBRACK','dimensions',3,'p_dimensions','principal.py',161),
  ('basic -> INT','basic',1,'p_basic','principal.py',168),
  ('basic -> CHAR','basic',1,'p_basic','principal.py',169),
  ('basic -> BOOL','basic',1,'p_basic','principal.py',170),
  ('statements -> statement statements','statements',2,'p_statements','principal.py',174),
  ('statements -> empty','statements',1,'p_statements','principal.py',175),
  ('statement -> local EQUALS boolean SEMICOLON','statement',4,'p_statement','principal.py',182),
  ('statement -> conditional','statement',1,'p_statement','principal.py',183),
  ('statement -> while_loop','statement',1,'p_statement','principal.py',184),
  ('statement -> do_while_loop','statement',1,'p_statement','principal.py',185),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement','principal.py',186),
  ('statement -> print','statement',1,'p_statement','principal.py',187),
  ('statement -> read','statement',1,'p_statement','principal.py',188),
  ('statement -> block','statement',1,'p_statement','principal.py',189),
  ('print -> PRINT LPAREN boolean RPAREN SEMICOLON','print',5,'p_print','principal.py',200),
  ('read -> READ LPAREN local RPAREN SEMICOLON','read',5,'p_read','principal.py',204),
  ('conditional -> IF LPAREN boolean RPAREN statement conditional_aux','conditional',6,'p_conditional','principal.py',208),
  ('conditional_aux -> ELSE statement','conditional_aux',2,'p_conditional_aux','principal.py',212),
  ('conditional_aux -> empty','conditional_aux',1,'p_conditional_aux','principal.py',213),
  ('while_loop -> WHILE LPAREN boolean RPAREN statement','while_loop',5,'p_while_loop','principal.py',220),
  ('do_while_loop -> DO statement WHILE LPAREN boolean RPAREN SEMICOLON','do_while_loop',7,'p_do_while_loop','principal.py',224),
  ('local -> HASH ID local_aux','local',3,'p_local','principal.py',228),
  ('local -> ID local_aux','local',2,'p_local','principal.py',229),
  ('local_aux -> offset','local_aux',1,'p_local_aux','principal.py',236),
  ('local_aux -> field','local_aux',1,'p_local_aux','principal.py',237),
  ('local_aux -> empty','local_aux',1,'p_local_aux','principal.py',238),
  ('offset -> LBRACK boolean RBRACK offset','offset',4,'p_offset','principal.py',245),
  ('offset -> empty','offset',1,'p_offset','principal.py',246),
  ('field -> DOT factor field','field',3,'p_field','principal.py',253),
  ('field -> DOT factor','field',2,'p_field','principal.py',254),
  ('boolean -> join','boolean',1,'p_boolean','principal.py',261),
  ('boolean -> boolean OR join','boolean',3,'p_boolean','principal.py',262),
  ('join -> equality','join',1,'p_join','principal.py',269),
  ('join -> join AND equality','join',3,'p_join','principal.py',270),
  ('equality -> relational','equality',1,'p_equality','principal.py',277),
  ('equality -> equality EQ relational','equality',3,'p_equality','principal.py',278),
  ('equality -> equality NEQ relational','equality',3,'p_equality','principal.py',279),
  ('relational -> expression','relational',1,'p_relational','principal.py',286),
  ('relational -> relational_operator expression','relational',2,'p_relational','principal.py',287),
  ('relational_operator -> LT','relational_operator',1,'p_relational_operator','principal.py',294),
  ('relational_operator -> LE','relational_operator',1,'p_relational_operator','principal.py',295),
  ('relational_operator -> GT','relational_operator',1,'p_relational_operator','principal.py',296),
  ('relational_operator -> GE','relational_operator',1,'p_relational_operator','principal.py',297),
  ('expression -> term expression_aux','expression',2,'p_expression','principal.py',301),
  ('expression_aux -> expression_operator term expression_aux','expression_aux',3,'p_expression_aux','principal.py',305),
  ('expression_aux -> empty','expression_aux',1,'p_expression_aux','principal.py',306),
  ('expression_operator -> PLUS','expression_operator',1,'p_expression_operator','principal.py',313),
  ('expression_operator -> MINUS','expression_operator',1,'p_expression_operator','principal.py',314),
  ('term -> unary','term',1,'p_term','principal.py',318),
  ('term -> term TIMES unary','term',3,'p_term','principal.py',319),
  ('term -> term DIVIDE unary','term',3,'p_term','principal.py',320),
  ('unary -> NOT unary','unary',2,'p_unary','principal.py',327),
  ('unary -> NEG unary','unary',2,'p_unary','principal.py',328),
  ('unary -> factor','unary',1,'p_unary','principal.py',329),
  ('factor -> LPAREN boolean RPAREN','factor',3,'p_factor','principal.py',336),
  ('factor -> local','factor',1,'p_factor','principal.py',337),
  ('factor -> NUMBER_INT','factor',1,'p_factor','principal.py',338),
  ('factor -> NUMBER_FLOAT','factor',1,'p_factor','principal.py',339),
  ('factor -> FALSE','factor',1,'p_factor','principal.py',340),
  ('factor -> TRUE','factor',1,'p_factor','principal.py',341),
  ('empty -> <empty>','empty',0,'p_empty','principal.py',348),
]
