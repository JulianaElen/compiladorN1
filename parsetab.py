
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL BREAK CHAR DIVIDE DO DOT ELSE EQ EQUALS FALSE GE GT HASH ID IF INT LBRACE LBRACK LE LPAREN LT MINUS NEG NEQ NOT NUMBER_FLOAT NUMBER_INT OR PLUS PRINT RBRACE RBRACK READ RECORD RPAREN SEMICOLON TIMES TRUE WHILEprogram : blockblock : LBRACE declaration statements RBRACEdeclaration : type ID SEMICOLON declaration\n                   | empty type : basic dimensions\n             | basic HASH\n             | basic\n             | RECORD LBRACE declaration RBRACEdimensions : LBRACK NUMBER_INT RBRACK dimensions\n                  | LBRACK NUMBER_INT RBRACKbasic : INT\n             | CHAR\n             | BOOLstatements : statement statements\n                  | emptystatement : local EQUALS boolean SEMICOLON\n                 | conditional\n                 | while_loop\n                 | do_while_loop\n                 | BREAK SEMICOLON\n                 | print\n                 | read\n                 | blockprint : PRINT LPAREN boolean RPAREN SEMICOLONread : READ LPAREN local RPAREN SEMICOLONconditional : IF LPAREN boolean RPAREN statement conditional_auxconditional_aux : ELSE statement\n                       | emptywhile_loop : WHILE LPAREN boolean RPAREN statementdo_while_loop : DO statement WHILE LPAREN boolean RPAREN SEMICOLONlocal : HASH ID local_aux\n             | ID local_auxlocal_aux : offset\n                   | field\n                   | emptyoffset : LBRACK boolean RBRACK offset\n              | emptyfield : DOT factor field\n             | DOT factorboolean : join boolean_auxboolean_aux : OR join boolean_aux\n                   | emptyjoin : equality join_auxjoin_aux : AND equality join_aux\n                | emptyequality : relational equality_auxequality_aux : EQ relational equality_aux\n                    | NEQ relational equality_aux\n                    | emptyrelational : expression relational_operator expressionrelational_operator : LT\n                           | LE\n                           | GT\n                           | GEexpression : term expression_auxexpression_aux : expression_operator term expression_aux\n                      | emptyexpression_operator : PLUS\n                           | MINUSterm : unary term_auxterm_aux : TIMES unary term_aux \n                | DIVIDE unary term_aux\n                | emptyunary : NOT unary\n             | NEG unary\n             | factorfactor : LPAREN boolean RPAREN\n              | local\n              | NUMBER_INT\n              | NUMBER_FLOAT\n              | FALSE\n              | TRUEempty :'
    
_lr_action_items = {'LBRACE':([0,3,4,6,8,13,16,17,18,20,21,22,27,35,38,51,78,81,111,112,128,129,131,132,140,141,142,144,145,],[3,-73,3,-4,34,3,-17,-18,-19,-21,-22,-23,3,-2,-20,-73,-3,-16,3,3,-73,-29,-24,-25,-26,3,-28,-27,-30,]),'$end':([1,2,35,],[0,-1,-2,]),'RECORD':([3,34,51,],[8,8,8,]),'BREAK':([3,4,6,13,16,17,18,20,21,22,27,35,38,51,78,81,111,112,128,129,131,132,140,141,142,144,145,],[-73,19,-4,19,-17,-18,-19,-21,-22,-23,19,-2,-20,-73,-3,-16,19,19,-73,-29,-24,-25,-26,19,-28,-27,-30,]),'HASH':([3,4,6,7,9,10,11,13,16,17,18,20,21,22,27,35,37,38,44,45,46,47,49,50,51,62,63,65,78,81,83,86,89,90,92,93,94,95,96,98,100,101,103,104,111,112,113,128,129,131,132,140,141,142,144,145,],[-73,23,-4,32,-11,-12,-13,23,-17,-18,-19,-21,-22,-23,23,-2,23,-20,23,23,23,23,23,23,-73,23,23,23,-3,-16,23,23,23,23,23,-51,-52,-53,-54,23,-58,-59,23,23,23,23,23,-73,-29,-24,-25,-26,23,-28,-27,-30,]),'ID':([3,4,5,6,7,9,10,11,13,16,17,18,20,21,22,23,27,31,32,35,37,38,44,45,46,47,49,50,51,62,63,65,78,79,80,81,83,86,89,90,92,93,94,95,96,98,100,101,103,104,111,112,113,116,128,129,131,132,140,141,142,144,145,],[-73,24,30,-4,-7,-11,-12,-13,24,-17,-18,-19,-21,-22,-23,39,24,-5,-6,-2,24,-20,24,24,24,24,24,24,-73,24,24,24,-3,-10,-8,-16,24,24,24,24,24,-51,-52,-53,-54,24,-58,-59,24,24,24,24,24,-9,-73,-29,-24,-25,-26,24,-28,-27,-30,]),'IF':([3,4,6,13,16,17,18,20,21,22,27,35,38,51,78,81,111,112,128,129,131,132,140,141,142,144,145,],[-73,25,-4,25,-17,-18,-19,-21,-22,-23,25,-2,-20,-73,-3,-16,25,25,-73,-29,-24,-25,-26,25,-28,-27,-30,]),'WHILE':([3,4,6,13,16,17,18,20,21,22,27,35,38,48,51,78,81,111,112,128,129,131,132,140,141,142,144,145,],[-73,26,-4,26,-17,-18,-19,-21,-22,-23,26,-2,-20,75,-73,-3,-16,26,26,-73,-29,-24,-25,-26,26,-28,-27,-30,]),'DO':([3,4,6,13,16,17,18,20,21,22,27,35,38,51,78,81,111,112,128,129,131,132,140,141,142,144,145,],[-73,27,-4,27,-17,-18,-19,-21,-22,-23,27,-2,-20,-73,-3,-16,27,27,-73,-29,-24,-25,-26,27,-28,-27,-30,]),'PRINT':([3,4,6,13,16,17,18,20,21,22,27,35,38,51,78,81,111,112,128,129,131,132,140,141,142,144,145,],[-73,28,-4,28,-17,-18,-19,-21,-22,-23,28,-2,-20,-73,-3,-16,28,28,-73,-29,-24,-25,-26,28,-28,-27,-30,]),'READ':([3,4,6,13,16,17,18,20,21,22,27,35,38,51,78,81,111,112,128,129,131,132,140,141,142,144,145,],[-73,29,-4,29,-17,-18,-19,-21,-22,-23,29,-2,-20,-73,-3,-16,29,29,-73,-29,-24,-25,-26,29,-28,-27,-30,]),'RBRACE':([3,4,6,12,13,14,16,17,18,20,21,22,34,35,36,38,51,53,78,81,128,129,131,132,140,142,144,145,],[-73,-73,-4,35,-73,-15,-17,-18,-19,-21,-22,-23,-73,-2,-14,-20,-73,80,-3,-16,-73,-29,-24,-25,-26,-28,-27,-30,]),'INT':([3,34,51,],[9,9,9,]),'CHAR':([3,34,51,],[10,10,10,]),'BOOL':([3,34,51,],[11,11,11,]),'LBRACK':([7,9,10,11,24,39,79,109,],[33,-11,-12,-13,44,44,33,44,]),'EQUALS':([15,24,39,40,41,42,43,54,66,67,68,69,70,72,109,110,125,126,127,],[37,-73,-73,-32,-33,-34,-35,-68,-69,-70,-71,-72,-31,-39,-73,-38,-67,-36,-37,]),'ELSE':([16,17,18,20,21,22,35,38,81,128,129,131,132,140,142,144,145,],[-17,-18,-19,-21,-22,-23,-2,-20,-16,141,-29,-24,-25,-26,-28,-27,-30,]),'SEMICOLON':([19,24,30,39,40,41,42,43,54,55,56,57,58,60,61,64,66,67,68,69,70,72,82,84,85,87,88,91,97,99,102,105,106,107,109,110,114,115,117,118,119,120,121,122,123,124,125,126,127,133,134,135,136,137,138,139,143,],[38,-73,51,-73,-32,-33,-34,-35,-68,81,-73,-73,-73,-73,-73,-66,-69,-70,-71,-72,-31,-39,-40,-42,-43,-45,-46,-49,-55,-57,-60,-63,-64,-65,-73,-38,131,132,-73,-73,-73,-73,-50,-73,-73,-73,-67,-36,-37,-41,-44,-47,-48,-56,-61,-62,145,]),'DOT':([24,39,40,41,42,43,54,66,67,68,69,70,72,109,110,125,126,127,],[45,45,-32,-33,-34,-35,-68,-69,-70,-71,-72,-31,45,-73,-38,-67,-36,-37,]),'TIMES':([24,39,40,41,42,43,54,61,64,66,67,68,69,70,72,106,107,109,110,123,124,125,126,127,],[-73,-73,-32,-33,-34,-35,-68,103,-66,-69,-70,-71,-72,-31,-39,-64,-65,-73,-38,103,103,-67,-36,-37,]),'DIVIDE':([24,39,40,41,42,43,54,61,64,66,67,68,69,70,72,106,107,109,110,123,124,125,126,127,],[-73,-73,-32,-33,-34,-35,-68,104,-66,-69,-70,-71,-72,-31,-39,-64,-65,-73,-38,104,104,-67,-36,-37,]),'PLUS':([24,39,40,41,42,43,54,60,61,64,66,67,68,69,70,72,102,105,106,107,109,110,122,123,124,125,126,127,138,139,],[-73,-73,-32,-33,-34,-35,-68,100,-73,-66,-69,-70,-71,-72,-31,-39,-60,-63,-64,-65,-73,-38,100,-73,-73,-67,-36,-37,-61,-62,]),'MINUS':([24,39,40,41,42,43,54,60,61,64,66,67,68,69,70,72,102,105,106,107,109,110,122,123,124,125,126,127,138,139,],[-73,-73,-32,-33,-34,-35,-68,101,-73,-66,-69,-70,-71,-72,-31,-39,-60,-63,-64,-65,-73,-38,101,-73,-73,-67,-36,-37,-61,-62,]),'LT':([24,39,40,41,42,43,54,59,60,61,64,66,67,68,69,70,72,97,99,102,105,106,107,109,110,122,123,124,125,126,127,137,138,139,],[-73,-73,-32,-33,-34,-35,-68,93,-73,-73,-66,-69,-70,-71,-72,-31,-39,-55,-57,-60,-63,-64,-65,-73,-38,-73,-73,-73,-67,-36,-37,-56,-61,-62,]),'LE':([24,39,40,41,42,43,54,59,60,61,64,66,67,68,69,70,72,97,99,102,105,106,107,109,110,122,123,124,125,126,127,137,138,139,],[-73,-73,-32,-33,-34,-35,-68,94,-73,-73,-66,-69,-70,-71,-72,-31,-39,-55,-57,-60,-63,-64,-65,-73,-38,-73,-73,-73,-67,-36,-37,-56,-61,-62,]),'GT':([24,39,40,41,42,43,54,59,60,61,64,66,67,68,69,70,72,97,99,102,105,106,107,109,110,122,123,124,125,126,127,137,138,139,],[-73,-73,-32,-33,-34,-35,-68,95,-73,-73,-66,-69,-70,-71,-72,-31,-39,-55,-57,-60,-63,-64,-65,-73,-38,-73,-73,-73,-67,-36,-37,-56,-61,-62,]),'GE':([24,39,40,41,42,43,54,59,60,61,64,66,67,68,69,70,72,97,99,102,105,106,107,109,110,122,123,124,125,126,127,137,138,139,],[-73,-73,-32,-33,-34,-35,-68,96,-73,-73,-66,-69,-70,-71,-72,-31,-39,-55,-57,-60,-63,-64,-65,-73,-38,-73,-73,-73,-67,-36,-37,-56,-61,-62,]),'RPAREN':([24,39,40,41,42,43,54,56,57,58,60,61,64,66,67,68,69,70,72,73,74,76,77,82,84,85,87,88,91,97,99,102,105,106,107,108,109,110,117,118,119,120,121,122,123,124,125,126,127,130,133,134,135,136,137,138,139,],[-73,-73,-32,-33,-34,-35,-68,-73,-73,-73,-73,-73,-66,-69,-70,-71,-72,-31,-39,111,112,114,115,-40,-42,-43,-45,-46,-49,-55,-57,-60,-63,-64,-65,125,-73,-38,-73,-73,-73,-73,-50,-73,-73,-73,-67,-36,-37,143,-41,-44,-47,-48,-56,-61,-62,]),'EQ':([24,39,40,41,42,43,54,58,60,61,64,66,67,68,69,70,72,97,99,102,105,106,107,109,110,119,120,121,122,123,124,125,126,127,137,138,139,],[-73,-73,-32,-33,-34,-35,-68,89,-73,-73,-66,-69,-70,-71,-72,-31,-39,-55,-57,-60,-63,-64,-65,-73,-38,89,89,-50,-73,-73,-73,-67,-36,-37,-56,-61,-62,]),'NEQ':([24,39,40,41,42,43,54,58,60,61,64,66,67,68,69,70,72,97,99,102,105,106,107,109,110,119,120,121,122,123,124,125,126,127,137,138,139,],[-73,-73,-32,-33,-34,-35,-68,90,-73,-73,-66,-69,-70,-71,-72,-31,-39,-55,-57,-60,-63,-64,-65,-73,-38,90,90,-50,-73,-73,-73,-67,-36,-37,-56,-61,-62,]),'AND':([24,39,40,41,42,43,54,57,58,60,61,64,66,67,68,69,70,72,88,91,97,99,102,105,106,107,109,110,118,119,120,121,122,123,124,125,126,127,135,136,137,138,139,],[-73,-73,-32,-33,-34,-35,-68,86,-73,-73,-73,-66,-69,-70,-71,-72,-31,-39,-46,-49,-55,-57,-60,-63,-64,-65,-73,-38,86,-73,-73,-50,-73,-73,-73,-67,-36,-37,-47,-48,-56,-61,-62,]),'OR':([24,39,40,41,42,43,54,56,57,58,60,61,64,66,67,68,69,70,72,85,87,88,91,97,99,102,105,106,107,109,110,117,118,119,120,121,122,123,124,125,126,127,134,135,136,137,138,139,],[-73,-73,-32,-33,-34,-35,-68,83,-73,-73,-73,-73,-66,-69,-70,-71,-72,-31,-39,-43,-45,-46,-49,-55,-57,-60,-63,-64,-65,-73,-38,83,-73,-73,-73,-50,-73,-73,-73,-67,-36,-37,-44,-47,-48,-56,-61,-62,]),'RBRACK':([24,39,40,41,42,43,52,54,56,57,58,60,61,64,66,67,68,69,70,71,72,82,84,85,87,88,91,97,99,102,105,106,107,109,110,117,118,119,120,121,122,123,124,125,126,127,133,134,135,136,137,138,139,],[-73,-73,-32,-33,-34,-35,79,-68,-73,-73,-73,-73,-73,-66,-69,-70,-71,-72,-31,109,-39,-40,-42,-43,-45,-46,-49,-55,-57,-60,-63,-64,-65,-73,-38,-73,-73,-73,-73,-50,-73,-73,-73,-67,-36,-37,-41,-44,-47,-48,-56,-61,-62,]),'LPAREN':([25,26,28,29,37,44,45,46,47,49,62,63,65,75,83,86,89,90,92,93,94,95,96,98,100,101,103,104,113,],[46,47,49,50,65,65,65,65,65,65,65,65,65,113,65,65,65,65,65,-51,-52,-53,-54,65,-58,-59,65,65,65,]),'NUMBER_INT':([33,37,44,45,46,47,49,62,63,65,83,86,89,90,92,93,94,95,96,98,100,101,103,104,113,],[52,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-51,-52,-53,-54,66,-58,-59,66,66,66,]),'NOT':([37,44,46,47,49,62,63,65,83,86,89,90,92,93,94,95,96,98,100,101,103,104,113,],[62,62,62,62,62,62,62,62,62,62,62,62,62,-51,-52,-53,-54,62,-58,-59,62,62,62,]),'NEG':([37,44,46,47,49,62,63,65,83,86,89,90,92,93,94,95,96,98,100,101,103,104,113,],[63,63,63,63,63,63,63,63,63,63,63,63,63,-51,-52,-53,-54,63,-58,-59,63,63,63,]),'NUMBER_FLOAT':([37,44,45,46,47,49,62,63,65,83,86,89,90,92,93,94,95,96,98,100,101,103,104,113,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,-51,-52,-53,-54,67,-58,-59,67,67,67,]),'FALSE':([37,44,45,46,47,49,62,63,65,83,86,89,90,92,93,94,95,96,98,100,101,103,104,113,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,-51,-52,-53,-54,68,-58,-59,68,68,68,]),'TRUE':([37,44,45,46,47,49,62,63,65,83,86,89,90,92,93,94,95,96,98,100,101,103,104,113,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,-51,-52,-53,-54,69,-58,-59,69,69,69,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,4,13,27,111,112,141,],[2,22,22,22,22,22,22,]),'declaration':([3,34,51,],[4,53,78,]),'type':([3,34,51,],[5,5,5,]),'empty':([3,4,13,24,34,39,51,56,57,58,60,61,109,117,118,119,120,122,123,124,128,],[6,14,14,43,6,43,6,84,87,91,99,105,127,84,87,91,91,99,105,105,142,]),'basic':([3,34,51,],[7,7,7,]),'statements':([4,13,],[12,36,]),'statement':([4,13,27,111,112,141,],[13,13,48,128,129,144,]),'local':([4,13,27,37,44,45,46,47,49,50,62,63,65,83,86,89,90,92,98,103,104,111,112,113,141,],[15,15,15,54,54,54,54,54,54,77,54,54,54,54,54,54,54,54,54,54,54,15,15,54,15,]),'conditional':([4,13,27,111,112,141,],[16,16,16,16,16,16,]),'while_loop':([4,13,27,111,112,141,],[17,17,17,17,17,17,]),'do_while_loop':([4,13,27,111,112,141,],[18,18,18,18,18,18,]),'print':([4,13,27,111,112,141,],[20,20,20,20,20,20,]),'read':([4,13,27,111,112,141,],[21,21,21,21,21,21,]),'dimensions':([7,79,],[31,116,]),'local_aux':([24,39,],[40,70,]),'offset':([24,39,109,],[41,41,126,]),'field':([24,39,72,],[42,42,110,]),'boolean':([37,44,46,47,49,65,113,],[55,71,73,74,76,108,130,]),'join':([37,44,46,47,49,65,83,113,],[56,56,56,56,56,56,117,56,]),'equality':([37,44,46,47,49,65,83,86,113,],[57,57,57,57,57,57,57,118,57,]),'relational':([37,44,46,47,49,65,83,86,89,90,113,],[58,58,58,58,58,58,58,58,119,120,58,]),'expression':([37,44,46,47,49,65,83,86,89,90,92,113,],[59,59,59,59,59,59,59,59,59,59,121,59,]),'term':([37,44,46,47,49,65,83,86,89,90,92,98,113,],[60,60,60,60,60,60,60,60,60,60,60,122,60,]),'unary':([37,44,46,47,49,62,63,65,83,86,89,90,92,98,103,104,113,],[61,61,61,61,61,106,107,61,61,61,61,61,61,61,123,124,61,]),'factor':([37,44,45,46,47,49,62,63,65,83,86,89,90,92,98,103,104,113,],[64,64,72,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'boolean_aux':([56,117,],[82,133,]),'join_aux':([57,118,],[85,134,]),'equality_aux':([58,119,120,],[88,135,136,]),'relational_operator':([59,],[92,]),'expression_aux':([60,122,],[97,137,]),'expression_operator':([60,122,],[98,98,]),'term_aux':([61,123,124,],[102,138,139,]),'conditional_aux':([128,],[140,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','principal.py',132),
  ('block -> LBRACE declaration statements RBRACE','block',4,'p_block','principal.py',136),
  ('declaration -> type ID SEMICOLON declaration','declaration',4,'p_declaration','principal.py',141),
  ('declaration -> empty','declaration',1,'p_declaration','principal.py',142),
  ('type -> basic dimensions','type',2,'p_type','principal.py',149),
  ('type -> basic HASH','type',2,'p_type','principal.py',150),
  ('type -> basic','type',1,'p_type','principal.py',151),
  ('type -> RECORD LBRACE declaration RBRACE','type',4,'p_type','principal.py',152),
  ('dimensions -> LBRACK NUMBER_INT RBRACK dimensions','dimensions',4,'p_dimensions','principal.py',161),
  ('dimensions -> LBRACK NUMBER_INT RBRACK','dimensions',3,'p_dimensions','principal.py',162),
  ('basic -> INT','basic',1,'p_basic','principal.py',169),
  ('basic -> CHAR','basic',1,'p_basic','principal.py',170),
  ('basic -> BOOL','basic',1,'p_basic','principal.py',171),
  ('statements -> statement statements','statements',2,'p_statements','principal.py',175),
  ('statements -> empty','statements',1,'p_statements','principal.py',176),
  ('statement -> local EQUALS boolean SEMICOLON','statement',4,'p_statement','principal.py',183),
  ('statement -> conditional','statement',1,'p_statement','principal.py',184),
  ('statement -> while_loop','statement',1,'p_statement','principal.py',185),
  ('statement -> do_while_loop','statement',1,'p_statement','principal.py',186),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement','principal.py',187),
  ('statement -> print','statement',1,'p_statement','principal.py',188),
  ('statement -> read','statement',1,'p_statement','principal.py',189),
  ('statement -> block','statement',1,'p_statement','principal.py',190),
  ('print -> PRINT LPAREN boolean RPAREN SEMICOLON','print',5,'p_print','principal.py',201),
  ('read -> READ LPAREN local RPAREN SEMICOLON','read',5,'p_read','principal.py',205),
  ('conditional -> IF LPAREN boolean RPAREN statement conditional_aux','conditional',6,'p_conditional','principal.py',209),
  ('conditional_aux -> ELSE statement','conditional_aux',2,'p_conditional_aux','principal.py',213),
  ('conditional_aux -> empty','conditional_aux',1,'p_conditional_aux','principal.py',214),
  ('while_loop -> WHILE LPAREN boolean RPAREN statement','while_loop',5,'p_while_loop','principal.py',221),
  ('do_while_loop -> DO statement WHILE LPAREN boolean RPAREN SEMICOLON','do_while_loop',7,'p_do_while_loop','principal.py',225),
  ('local -> HASH ID local_aux','local',3,'p_local','principal.py',229),
  ('local -> ID local_aux','local',2,'p_local','principal.py',230),
  ('local_aux -> offset','local_aux',1,'p_local_aux','principal.py',237),
  ('local_aux -> field','local_aux',1,'p_local_aux','principal.py',238),
  ('local_aux -> empty','local_aux',1,'p_local_aux','principal.py',239),
  ('offset -> LBRACK boolean RBRACK offset','offset',4,'p_offset','principal.py',246),
  ('offset -> empty','offset',1,'p_offset','principal.py',247),
  ('field -> DOT factor field','field',3,'p_field','principal.py',254),
  ('field -> DOT factor','field',2,'p_field','principal.py',255),
  ('boolean -> join boolean_aux','boolean',2,'p_boolean','principal.py',262),
  ('boolean_aux -> OR join boolean_aux','boolean_aux',3,'p_boolean_aux','principal.py',266),
  ('boolean_aux -> empty','boolean_aux',1,'p_boolean_aux','principal.py',267),
  ('join -> equality join_aux','join',2,'p_join','principal.py',274),
  ('join_aux -> AND equality join_aux','join_aux',3,'p_join_aux','principal.py',278),
  ('join_aux -> empty','join_aux',1,'p_join_aux','principal.py',279),
  ('equality -> relational equality_aux','equality',2,'p_equality','principal.py',286),
  ('equality_aux -> EQ relational equality_aux','equality_aux',3,'p_equality_aux','principal.py',290),
  ('equality_aux -> NEQ relational equality_aux','equality_aux',3,'p_equality_aux','principal.py',291),
  ('equality_aux -> empty','equality_aux',1,'p_equality_aux','principal.py',292),
  ('relational -> expression relational_operator expression','relational',3,'p_relational','principal.py',299),
  ('relational_operator -> LT','relational_operator',1,'p_relational_operator','principal.py',303),
  ('relational_operator -> LE','relational_operator',1,'p_relational_operator','principal.py',304),
  ('relational_operator -> GT','relational_operator',1,'p_relational_operator','principal.py',305),
  ('relational_operator -> GE','relational_operator',1,'p_relational_operator','principal.py',306),
  ('expression -> term expression_aux','expression',2,'p_expression','principal.py',310),
  ('expression_aux -> expression_operator term expression_aux','expression_aux',3,'p_expression_aux','principal.py',314),
  ('expression_aux -> empty','expression_aux',1,'p_expression_aux','principal.py',315),
  ('expression_operator -> PLUS','expression_operator',1,'p_expression_operator','principal.py',322),
  ('expression_operator -> MINUS','expression_operator',1,'p_expression_operator','principal.py',323),
  ('term -> unary term_aux','term',2,'p_term','principal.py',327),
  ('term_aux -> TIMES unary term_aux','term_aux',3,'p_term_aux','principal.py',331),
  ('term_aux -> DIVIDE unary term_aux','term_aux',3,'p_term_aux','principal.py',332),
  ('term_aux -> empty','term_aux',1,'p_term_aux','principal.py',333),
  ('unary -> NOT unary','unary',2,'p_unary','principal.py',340),
  ('unary -> NEG unary','unary',2,'p_unary','principal.py',341),
  ('unary -> factor','unary',1,'p_unary','principal.py',342),
  ('factor -> LPAREN boolean RPAREN','factor',3,'p_factor','principal.py',349),
  ('factor -> local','factor',1,'p_factor','principal.py',350),
  ('factor -> NUMBER_INT','factor',1,'p_factor','principal.py',351),
  ('factor -> NUMBER_FLOAT','factor',1,'p_factor','principal.py',352),
  ('factor -> FALSE','factor',1,'p_factor','principal.py',353),
  ('factor -> TRUE','factor',1,'p_factor','principal.py',354),
  ('empty -> <empty>','empty',0,'p_empty','principal.py',361),
]
